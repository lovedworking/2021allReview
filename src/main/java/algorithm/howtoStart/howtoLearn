如何学习算法？
    一  数据结构的存储方式
            只有两种： 1数组  顺序存储
                       2和链表  链式存储
             其他的 栈 队列  数  图  什么的都是上层建筑
              栈、队列
                                既可以使用数组 也可以使用链表实现，使用数组实现，就要处理扩种缩容问题；链表实现，没有这个问题
              图的两种表示方法  邻接表就是链表    比较节省空间 但是很多操作效率比不过临接矩阵
                                临接矩阵就是二维数组   判断连通性迅速，如果图比较稀疏的话比较耗费空间
               散列表
                                就是通过散列函数把键映射到一个大数组里   解决冲突需要拉链法 需要链表特性
                                                                        线性探查就需要数组
               树
                                 数组实现就是堆  堆就是一个完全二叉树，用数组存储不需要节点指针，操作比较简单
                                 用链表实现就是常见的那种数，因为不一定是完全二叉树，所以不适合用数组此存储
                                    二叉搜索树 AVL树  红黑树   区间树  B树 等等
               说回来 那么要说一下  数组和链表的优缺点了
               数组：
                    优点
                        因为紧密存储，可随机访问，通过索引快速查找元素，而且相对节约存储空间，
                    缺点
                        正因为连续存储，内存空间必须一次性分配够，所以说数组如果扩容，需要重新分配
                        一块更大的空间，再把数据全部复制过去，时间复杂度O(N);如果想在数组中间进行插入或者删除
                        每次必须搬移后面的所有数据以保持连续，时间复杂度O(N)
               链表
                    优点
                        因为元素不连续，靠指针指向下一个元素的位置，所以不存在数组的扩容问题，如果知道某一元素的前驱和后驱
                        操作指针删除该元素或插入新元素时间复杂度O(1)
                    缺点
                        因为存储空间不连续，无法根据索引算出对应元地址，不能随机访问，而且每个元素必须存储指向
                        前后元素位置的指针，会消耗相对更多存储空间
    二 数据结构的基本操作？
        数据结构的操作  遍历+访问  再具体点：增删改查
        再高点说？  就是线性的和非线性的
        线性的就是 for/while迭代为代表  非线性就是递归为代表
        数组的遍历  线性代表
               void  traverse(int[] arr){
                    for(int i=0;i<arr.length;i++){
                        //迭代访问元素
                    }
               }
        链表遍历框架  兼具迭代和递归
            /*基本单链表节点*/
            class ListNode{
                int val;
                ListNode next;
            }
            void traverse(ListNode head){
                for(ListNode p=head;p!=null;p=p.next){
                    //迭代访问 p.val
                }
            }
            void traverse (ListNode head){
                //递归访问 head.val
                traverse(head.next)
            }
        二叉树的遍历框架  典型的非线性
        //基本二叉树节点
        class TreeNode{
            int val;
            TreeNode left,right;
        }
        void traverse(TreeNode root){
            traverse(root.left);
            traverse(root.right);
        }

        //扩展为N叉树
        class TreeNode{
            int val;
            TreeNode[] children;
        }

        void traverse(TreeNode root){
            for(TreeNode child:root.children){
                traverse(child)
            }
        }
     N叉树的遍历又可以扩展为图的遍历，图就是好几N叉棵数的结合体
     用个布尔数组visited做标记就行了



































